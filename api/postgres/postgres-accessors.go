// Copyright 2020
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
// Code generated by gen-accessors; DO NOT EDIT.
package postgres

import (
	"time"
)

// HasActiveIPRules checks if MTLS has any ActiveIPRules.
func (m *MTLS) HasActiveIPRules() bool {
	if m == nil || m.ActiveIPRules == nil {
		return false
	}
	if len(m.ActiveIPRules) == 0 {
		return false
	}
	return true
}

// GetAddon returns the Addon field if it's non-nil, zero value otherwise.
func (m *MTLS) GetAddon() string {
	if m == nil || m.Addon == nil {
		return ""
	}
	return *m.Addon
}

// GetApp returns the App field if it's non-nil, zero value otherwise.
func (m *MTLS) GetApp() string {
	if m == nil || m.App == nil {
		return ""
	}
	return *m.App
}

// GetCertificateAuthorityChain returns the CertificateAuthorityChain field if it's non-nil, zero value otherwise.
func (m *MTLS) GetCertificateAuthorityChain() string {
	if m == nil || m.CertificateAuthorityChain == nil {
		return ""
	}
	return *m.CertificateAuthorityChain
}

// GetEnabledBy returns the EnabledBy field if it's non-nil, zero value otherwise.
func (m *MTLS) GetEnabledBy() string {
	if m == nil || m.EnabledBy == nil {
		return ""
	}
	return *m.EnabledBy
}

// GetStatus returns the Status field.
func (m *MTLS) GetStatus() *MTLSConfigStatus {
	if m == nil {
		return nil
	}
	return m.Status
}

// GetCertificateWithChain returns the CertificateWithChain field if it's non-nil, zero value otherwise.
func (m *MTLSCert) GetCertificateWithChain() string {
	if m == nil || m.CertificateWithChain == nil {
		return ""
	}
	return *m.CertificateWithChain
}

// GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
func (m *MTLSCert) GetCreatedAt() time.Time {
	if m == nil || m.CreatedAt == nil {
		return time.Time{}
	}
	return *m.CreatedAt
}

// GetExpiresAt returns the ExpiresAt field if it's non-nil, zero value otherwise.
func (m *MTLSCert) GetExpiresAt() time.Time {
	if m == nil || m.ExpiresAt == nil {
		return time.Time{}
	}
	return *m.ExpiresAt
}

// GetID returns the ID field if it's non-nil, zero value otherwise.
func (m *MTLSCert) GetID() string {
	if m == nil || m.ID == nil {
		return ""
	}
	return *m.ID
}

// GetName returns the Name field if it's non-nil, zero value otherwise.
func (m *MTLSCert) GetName() string {
	if m == nil || m.Name == nil {
		return ""
	}
	return *m.Name
}

// GetPrivateKey returns the PrivateKey field if it's non-nil, zero value otherwise.
func (m *MTLSCert) GetPrivateKey() string {
	if m == nil || m.PrivateKey == nil {
		return ""
	}
	return *m.PrivateKey
}

// GetStatus returns the Status field.
func (m *MTLSCert) GetStatus() *MTLSCertStatus {
	if m == nil {
		return nil
	}
	return m.Status
}

// GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
func (m *MTLSCert) GetUpdatedAt() time.Time {
	if m == nil || m.UpdatedAt == nil {
		return time.Time{}
	}
	return *m.UpdatedAt
}

// GetCIDR returns the CIDR field if it's non-nil, zero value otherwise.
func (m *MTLSIPRule) GetCIDR() string {
	if m == nil || m.CIDR == nil {
		return ""
	}
	return *m.CIDR
}

// GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
func (m *MTLSIPRule) GetCreatedAt() time.Time {
	if m == nil || m.CreatedAt == nil {
		return time.Time{}
	}
	return *m.CreatedAt
}

// GetDescription returns the Description field if it's non-nil, zero value otherwise.
func (m *MTLSIPRule) GetDescription() string {
	if m == nil || m.Description == nil {
		return ""
	}
	return *m.Description
}

// GetID returns the ID field if it's non-nil, zero value otherwise.
func (m *MTLSIPRule) GetID() string {
	if m == nil || m.ID == nil {
		return ""
	}
	return *m.ID
}

// GetStatus returns the Status field.
func (m *MTLSIPRule) GetStatus() *MTLSIPRuleStatus {
	if m == nil {
		return nil
	}
	return m.Status
}

// GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
func (m *MTLSIPRule) GetUpdatedAt() time.Time {
	if m == nil || m.UpdatedAt == nil {
		return time.Time{}
	}
	return *m.UpdatedAt
}
