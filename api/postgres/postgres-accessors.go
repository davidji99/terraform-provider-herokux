// Copyright 2020
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
// Code generated by gen-accessors; DO NOT EDIT.
package postgres

import (
	"time"
)

// HasActiveIPRules checks if MTLS has any ActiveIPRules.
func (m *MTLS) HasActiveIPRules() bool {
	if m == nil || m.ActiveIPRules == nil {
		return false
	}
	if len(m.ActiveIPRules) == 0 {
		return false
	}
	return true
}

// GetAddon returns the Addon field if it's non-nil, zero value otherwise.
func (m *MTLS) GetAddon() string {
	if m == nil || m.Addon == nil {
		return ""
	}
	return *m.Addon
}

// GetApp returns the App field if it's non-nil, zero value otherwise.
func (m *MTLS) GetApp() string {
	if m == nil || m.App == nil {
		return ""
	}
	return *m.App
}

// GetCertificateAuthorityChain returns the CertificateAuthorityChain field if it's non-nil, zero value otherwise.
func (m *MTLS) GetCertificateAuthorityChain() string {
	if m == nil || m.CertificateAuthorityChain == nil {
		return ""
	}
	return *m.CertificateAuthorityChain
}

// GetEnabledBy returns the EnabledBy field if it's non-nil, zero value otherwise.
func (m *MTLS) GetEnabledBy() string {
	if m == nil || m.EnabledBy == nil {
		return ""
	}
	return *m.EnabledBy
}

// GetStatus returns the Status field.
func (m *MTLS) GetStatus() *MTLSConfigStatus {
	if m == nil {
		return nil
	}
	return m.Status
}

// GetCertificateWithChain returns the CertificateWithChain field if it's non-nil, zero value otherwise.
func (m *MTLSCert) GetCertificateWithChain() string {
	if m == nil || m.CertificateWithChain == nil {
		return ""
	}
	return *m.CertificateWithChain
}

// GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
func (m *MTLSCert) GetCreatedAt() time.Time {
	if m == nil || m.CreatedAt == nil {
		return time.Time{}
	}
	return *m.CreatedAt
}

// GetExpiresAt returns the ExpiresAt field if it's non-nil, zero value otherwise.
func (m *MTLSCert) GetExpiresAt() time.Time {
	if m == nil || m.ExpiresAt == nil {
		return time.Time{}
	}
	return *m.ExpiresAt
}

// GetID returns the ID field if it's non-nil, zero value otherwise.
func (m *MTLSCert) GetID() string {
	if m == nil || m.ID == nil {
		return ""
	}
	return *m.ID
}

// GetName returns the Name field if it's non-nil, zero value otherwise.
func (m *MTLSCert) GetName() string {
	if m == nil || m.Name == nil {
		return ""
	}
	return *m.Name
}

// GetPrivateKey returns the PrivateKey field if it's non-nil, zero value otherwise.
func (m *MTLSCert) GetPrivateKey() string {
	if m == nil || m.PrivateKey == nil {
		return ""
	}
	return *m.PrivateKey
}

// GetStatus returns the Status field.
func (m *MTLSCert) GetStatus() *MTLSCertStatus {
	if m == nil {
		return nil
	}
	return m.Status
}

// GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
func (m *MTLSCert) GetUpdatedAt() time.Time {
	if m == nil || m.UpdatedAt == nil {
		return time.Time{}
	}
	return *m.UpdatedAt
}

// GetCIDR returns the CIDR field if it's non-nil, zero value otherwise.
func (m *MTLSIPRule) GetCIDR() string {
	if m == nil || m.CIDR == nil {
		return ""
	}
	return *m.CIDR
}

// GetCreatedAt returns the CreatedAt field if it's non-nil, zero value otherwise.
func (m *MTLSIPRule) GetCreatedAt() time.Time {
	if m == nil || m.CreatedAt == nil {
		return time.Time{}
	}
	return *m.CreatedAt
}

// GetDescription returns the Description field if it's non-nil, zero value otherwise.
func (m *MTLSIPRule) GetDescription() string {
	if m == nil || m.Description == nil {
		return ""
	}
	return *m.Description
}

// GetID returns the ID field if it's non-nil, zero value otherwise.
func (m *MTLSIPRule) GetID() string {
	if m == nil || m.ID == nil {
		return ""
	}
	return *m.ID
}

// GetStatus returns the Status field.
func (m *MTLSIPRule) GetStatus() *MTLSIPRuleStatus {
	if m == nil {
		return nil
	}
	return m.Status
}

// GetUpdatedAt returns the UpdatedAt field if it's non-nil, zero value otherwise.
func (m *MTLSIPRule) GetUpdatedAt() time.Time {
	if m == nil || m.UpdatedAt == nil {
		return time.Time{}
	}
	return *m.UpdatedAt
}

// GetAddon returns the Addon field.
func (p *Privatelink) GetAddon() *PrivatelinkAddon {
	if p == nil {
		return nil
	}
	return p.Addon
}

// HasAllowedAccounts checks if Privatelink has any AllowedAccounts.
func (p *Privatelink) HasAllowedAccounts() bool {
	if p == nil || p.AllowedAccounts == nil {
		return false
	}
	if len(p.AllowedAccounts) == 0 {
		return false
	}
	return true
}

// GetApp returns the App field.
func (p *Privatelink) GetApp() *PrivatelinkApp {
	if p == nil {
		return nil
	}
	return p.App
}

// HasConnections checks if Privatelink has any Connections.
func (p *Privatelink) HasConnections() bool {
	if p == nil || p.Connections == nil {
		return false
	}
	if len(p.Connections) == 0 {
		return false
	}
	return true
}

// GetServiceName returns the ServiceName field if it's non-nil, zero value otherwise.
func (p *Privatelink) GetServiceName() string {
	if p == nil || p.ServiceName == nil {
		return ""
	}
	return *p.ServiceName
}

// HasWhitelistedAccounts checks if Privatelink has any WhitelistedAccounts.
func (p *Privatelink) HasWhitelistedAccounts() bool {
	if p == nil || p.WhitelistedAccounts == nil {
		return false
	}
	if len(p.WhitelistedAccounts) == 0 {
		return false
	}
	return true
}

// GetName returns the Name field if it's non-nil, zero value otherwise.
func (p *PrivatelinkAddon) GetName() string {
	if p == nil || p.Name == nil {
		return ""
	}
	return *p.Name
}

// GetUUID returns the UUID field if it's non-nil, zero value otherwise.
func (p *PrivatelinkAddon) GetUUID() string {
	if p == nil || p.UUID == nil {
		return ""
	}
	return *p.UUID
}

// GetAccountID returns the AccountID field if it's non-nil, zero value otherwise.
func (p *PrivatelinkAllowedAccounts) GetAccountID() string {
	if p == nil || p.AccountID == nil {
		return ""
	}
	return *p.AccountID
}

// GetARN returns the ARN field if it's non-nil, zero value otherwise.
func (p *PrivatelinkAllowedAccounts) GetARN() string {
	if p == nil || p.ARN == nil {
		return ""
	}
	return *p.ARN
}

// GetName returns the Name field if it's non-nil, zero value otherwise.
func (p *PrivatelinkApp) GetName() string {
	if p == nil || p.Name == nil {
		return ""
	}
	return *p.Name
}

// GetEndpointID returns the EndpointID field if it's non-nil, zero value otherwise.
func (p *PrivatelinkConnections) GetEndpointID() string {
	if p == nil || p.EndpointID == nil {
		return ""
	}
	return *p.EndpointID
}

// GetHostname returns the Hostname field if it's non-nil, zero value otherwise.
func (p *PrivatelinkConnections) GetHostname() string {
	if p == nil || p.Hostname == nil {
		return ""
	}
	return *p.Hostname
}

// GetOwnerARN returns the OwnerARN field if it's non-nil, zero value otherwise.
func (p *PrivatelinkConnections) GetOwnerARN() string {
	if p == nil || p.OwnerARN == nil {
		return ""
	}
	return *p.OwnerARN
}

// GetStatus returns the Status field if it's non-nil, zero value otherwise.
func (p *PrivatelinkConnections) GetStatus() string {
	if p == nil || p.Status == nil {
		return ""
	}
	return *p.Status
}

// HasAllowedAccounts checks if PrivatelinkRequest has any AllowedAccounts.
func (p *PrivatelinkRequest) HasAllowedAccounts() bool {
	if p == nil || p.AllowedAccounts == nil {
		return false
	}
	if len(p.AllowedAccounts) == 0 {
		return false
	}
	return true
}
